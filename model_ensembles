{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Ensemble\n",
    "\n",
    "* Linear Classifications\n",
    "    - Partial Least Squares\n",
    "        + method = \"pls\"\n",
    "        + pre-process: nzv, pca\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: ncomp = 3\n",
    "    - Penalized Models\n",
    "        + method = \"glmnet\"\n",
    "        + pre-process: nzv, pca\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: alpha = 0.1; lamda = 0.1\n",
    "* Nonlinear Classifications\n",
    "    - Flexible Discriminant Analysis\n",
    "        + method = \"fda\"\n",
    "        + pre-process: none\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: nprune = 14; degree = 1 (need to test higher nprune settings: degree 1:2, nprune 2:38)\n",
    "    - Multivariate Adaptive Regression Spline\n",
    "        + method = \"earth\"\n",
    "        + pre-process: none\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: nprune = 11; degree = 1\n",
    "    - Neural Network\n",
    "        + method = \"nnet\"\n",
    "        + pre-process = center, scale, spatialSign\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: size = 1; decay = 2\n",
    "        + extra: maxSize = 10; MaxNWts, trace = FALSE, maxit\n",
    "    - Support Vector Machines (Radial Kernal)\n",
    "        + method = \"svmRadial\"\n",
    "        + pre-process = center, scale\n",
    "        + vars: hc.dv\n",
    "        + train.dv\n",
    "        + tune: sigma = 0.002439976; C = 0.5\n",
    "* Classification Trees \n",
    "    - eXtreme Gradient Boosting\n",
    "        + method = \"xgbTree\"\n",
    "        + pre-process: none\n",
    "        + vars: none\n",
    "        + as.matrix(train.dv)\n",
    "        + tune: max_depth = 2; eta = 0.01\n",
    "    - C5.0\n",
    "        + method = \"c5.0\"\n",
    "        + pre-process: none\n",
    "        + vars: none\n",
    "        + train.set: 1st - trials = 8, model = tree, winnow = FALSE\n",
    "        + train.dv: 2nd - trials = 8, model = tree, winnow = FALSE\n",
    "        + train.data: 3rd - trials = 20, model = rules, winnow = TRUE\n",
    "    - Random Forest\n",
    "        + method = \"rf\"\n",
    "        + pre-process: none\n",
    "        + vars: none\n",
    "        + train.set: 1st - mtry = 20 (need to retest mtry between 5 - 50)\n",
    "        + train.dv: 2nd - mtry = 50 (need to retest mtry between 5 - 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: 'dplyr'\n",
      "\n",
      "The following objects are masked from 'package:plyr':\n",
      "\n",
      "    arrange, count, desc, failwith, id, mutate, rename, summarise,\n",
      "    summarize\n",
      "\n",
      "The following objects are masked from 'package:stats':\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from 'package:base':\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "Attaching package: 'tibble'\n",
      "\n",
      "The following objects are masked from 'package:dplyr':\n",
      "\n",
      "    as_data_frame, data_frame, data_frame_, frame_data, glimpse,\n",
      "    knit_print.trunc_mat, tibble, trunc_mat, type_sum\n",
      "\n",
      "Loading required package: lattice\n",
      "Loading required package: ggplot2\n",
      "\n",
      "Attaching package: 'purrr'\n",
      "\n",
      "The following object is masked from 'package:caret':\n",
      "\n",
      "    lift\n",
      "\n",
      "The following object is masked from 'package:dplyr':\n",
      "\n",
      "    order_by\n",
      "\n",
      "The following object is masked from 'package:plyr':\n",
      "\n",
      "    compact\n",
      "\n",
      "Loading required package: Rcpp\n",
      "mice 2.25 2015-11-09\n",
      "Loading required package: foreach\n",
      "\n",
      "Attaching package: 'foreach'\n",
      "\n",
      "The following objects are masked from 'package:purrr':\n",
      "\n",
      "    accumulate, when\n",
      "\n",
      "Loading required package: iterators\n",
      "Loading required package: parallel\n"
     ]
    }
   ],
   "source": [
    "source(\"2-model_tests.R\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: 'caretEnsemble'\n",
      "\n",
      "The following object is masked from 'package:ggplot2':\n",
      "\n",
      "    autoplot\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(caretEnsemble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pls <- caretModelSpec(method = \"pls\", tuneGrid = expand.grid(.ncomp = 3), preProcess = c(\"nzv\", \"pca\"))\n",
    "glmnet <- caretModelSpec(method = \"glmnet\", tuneGrid = expand.grid(.alpha = 0.1, .lambda = 0.1), preProcess = c(\"nzv\", \"pca\"))\n",
    "fda <- caretModelSpec(method = \"fda\", tuneGrid = expand.grid(.degree = 1, .nprune = 14))\n",
    "earth <- caretModelSpec(method = \"earth\", tuneGrid = expand.grid(.degree = 1, .nprune = 11))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "specs <- list(pls = pls, glmnet = glmnet, fda = fda, earth = earth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in a$method: $ operator is invalid for atomic vectors\n",
     "output_type": "error",
     "traceback": [
      "Error in a$method: $ operator is invalid for atomic vectors\nTraceback:\n",
      "1. map(specs2, function(z) caretList(x = train.dv[, -c(1, hc.dv)], \n .     y = train.party, metric = \"ROC\", trControl = trCtrl, tuneList = z, \n .     continue_on_fail = TRUE))",
      "2. .f(.x[[i]], ...)",
      "3. caretList(x = train.dv[, -c(1, hc.dv)], y = train.party, metric = \"ROC\", \n .     trControl = trCtrl, tuneList = z, continue_on_fail = TRUE)   # at line 3-4 of file <text>",
      "4. tuneCheck(tuneList)",
      "5. sapply(x, function(a) a$method)",
      "6. lapply(X = X, FUN = FUN, ...)",
      "7. FUN(X[[i]], ...)"
     ]
    }
   ],
   "source": [
    "specs2 <- list(pls, glmnet)\n",
    "set.seed(1056)\n",
    "models <- map(specs2, function(z) caretList(x = train.dv[, -c(1, hc.dv)], y = train.party, metric = \"ROC\", trControl = trCtrl, \n",
    "                                  tuneList = z, continue_on_fail = TRUE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: earth\n",
      "Loading required package: plotmo\n",
      "Loading required package: plotrix\n",
      "Loading required package: TeachingDemos\n",
      "Loading required package: mda\n",
      "Loading required package: class\n",
      "Loaded mda 0.4-8\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Timing stopped at: 0.1 0 0.1 \n"
     ]
    }
   ],
   "source": [
    "set.seed(1056)\n",
    "cl <- caretList(x = train.dv[, -c(1, hc.dv)], y = train.party, metric = \"ROC\", trControl = trCtrl, tuneList = specs,\n",
    "               continue_on_fail = TRUE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "$pls\n",
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: principal component signal extraction (309), centered\n",
       " (309), scaled (309), remove (6) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4009, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec    \n",
       "  0.6750398  0.6899514  0.549866\n",
       "\n",
       "Tuning parameter 'ncomp' was held constant at a value of 3\n",
       " \n",
       "\n",
       "$glmnet\n",
       "glmnet \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: principal component signal extraction (309), centered\n",
       " (309), scaled (309), remove (6) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4009, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens     Spec     \n",
       "  0.6680531  0.75086  0.4608394\n",
       "\n",
       "Tuning parameter 'alpha' was held constant at a value of 0.1\n",
       "Tuning\n",
       " parameter 'lambda' was held constant at a value of 0.1\n",
       " \n",
       "\n",
       "$earth\n",
       "Multivariate Adaptive Regression Spline \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "No pre-processing\n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4009, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6727892  0.6848695  0.5513037\n",
       "\n",
       "Tuning parameter 'nprune' was held constant at a value of 11\n",
       "Tuning\n",
       " parameter 'degree' was held constant at a value of 1\n",
       " \n",
       "\n",
       "attr(,\"class\")\n",
       "[1] \"caretList\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "$pls\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        418        214\n",
       "  Republican      172        309\n",
       "                                          \n",
       "               Accuracy : 0.6532          \n",
       "                 95% CI : (0.6244, 0.6812)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : <2e-16          \n",
       "                                          \n",
       "                  Kappa : 0.3007          \n",
       " Mcnemar's Test P-Value : 0.0369          \n",
       "                                          \n",
       "            Sensitivity : 0.7085          \n",
       "            Specificity : 0.5908          \n",
       "         Pos Pred Value : 0.6614          \n",
       "         Neg Pred Value : 0.6424          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3756          \n",
       "   Detection Prevalence : 0.5678          \n",
       "      Balanced Accuracy : 0.6496          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n",
       "$glmnet\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        463        271\n",
       "  Republican      127        252\n",
       "                                          \n",
       "               Accuracy : 0.6424          \n",
       "                 95% CI : (0.6135, 0.6706)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 2.298e-14       \n",
       "                                          \n",
       "                  Kappa : 0.2708          \n",
       " Mcnemar's Test P-Value : 7.613e-13       \n",
       "                                          \n",
       "            Sensitivity : 0.7847          \n",
       "            Specificity : 0.4818          \n",
       "         Pos Pred Value : 0.6308          \n",
       "         Neg Pred Value : 0.6649          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.4160          \n",
       "   Detection Prevalence : 0.6595          \n",
       "      Balanced Accuracy : 0.6333          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n",
       "$earth\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        399        219\n",
       "  Republican      191        304\n",
       "                                        \n",
       "               Accuracy : 0.6316        \n",
       "                 95% CI : (0.6025, 0.66)\n",
       "    No Information Rate : 0.5301        \n",
       "    P-Value [Acc > NIR] : 4.974e-12     \n",
       "                                        \n",
       "                  Kappa : 0.2583        \n",
       " Mcnemar's Test P-Value : 0.1824        \n",
       "                                        \n",
       "            Sensitivity : 0.6763        \n",
       "            Specificity : 0.5813        \n",
       "         Pos Pred Value : 0.6456        \n",
       "         Neg Pred Value : 0.6141        \n",
       "             Prevalence : 0.5301        \n",
       "         Detection Rate : 0.3585        \n",
       "   Detection Prevalence : 0.5553        \n",
       "      Balanced Accuracy : 0.6288        \n",
       "                                        \n",
       "       'Positive' Class : Democrat      \n",
       "                                        \n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "library(purrr)\n",
    "map(cl, predict, newdata = valid.dv[, -c(1, hc.dv)]) %>%\n",
    "map(confusionMatrix, valid.party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th></th><th scope=col>pls</th><th scope=col>glmnet</th><th scope=col>earth</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>pls</th><td>1.0000000</td><td>0.9075784</td><td>0.7693086</td></tr>\n",
       "\t<tr><th scope=row>glmnet</th><td>0.9075784</td><td>1.0000000</td><td>0.7044962</td></tr>\n",
       "\t<tr><th scope=row>earth</th><td>0.7693086</td><td>0.7044962</td><td>1.0000000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|lll}\n",
       "  & pls & glmnet & earth\\\\\n",
       "\\hline\n",
       "\tpls & 1.0000000 & 0.9075784 & 0.7693086\\\\\n",
       "\tglmnet & 0.9075784 & 1.0000000 & 0.7044962\\\\\n",
       "\tearth & 0.7693086 & 0.7044962 & 1.0000000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 0.907578381473525\n",
       "3. 0.769308612360208\n",
       "4. 0.907578381473525\n",
       "5. 1\n",
       "6. 0.704496154035082\n",
       "7. 0.769308612360208\n",
       "8. 0.704496154035082\n",
       "9. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "             pls    glmnet     earth\n",
       "pls    1.0000000 0.9075784 0.7693086\n",
       "glmnet 0.9075784 1.0000000 0.7044962\n",
       "earth  0.7693086 0.7044962 1.0000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelCor(resamples(cl))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error: is(list_of_models, \"caretList\") is not TRUE\n",
     "output_type": "error",
     "traceback": [
      "Error: is(list_of_models, \"caretList\") is not TRUE\nTraceback:\n",
      "1. caretStack(list(cl$pls, cl$earth))",
      "2. makePredObsMatrix(all.models)",
      "3. check_caretList_classes(list_of_models)",
      "4. stopifnot(is(list_of_models, \"caretList\"))",
      "5. stop(sprintf(ngettext(length(r), \"%s is not TRUE\", \"%s are not all TRUE\"), \n .     ch), call. = FALSE, domain = NA)"
     ]
    }
   ],
   "source": [
    "stack <- caretStack(cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A rf ensemble of 2 base models: pls, glmnet, earth\n",
       "\n",
       "Ensemble results:\n",
       "Random Forest \n",
       "\n",
       "22275 samples\n",
       "    3 predictor\n",
       "    2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "No pre-processing\n",
       "Resampling: Bootstrapped (25 reps) \n",
       "Summary of sample sizes: 22275, 22275, 22275, 22275, 22275, 22275, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  mtry  Accuracy   Kappa    \n",
       "  2     0.5972289  0.1906108\n",
       "  3     0.5960913  0.1882414\n",
       "\n",
       "Accuracy was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was mtry = 2. "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        378        228\n",
       "  Republican      212        295\n",
       "                                          \n",
       "               Accuracy : 0.6047          \n",
       "                 95% CI : (0.5753, 0.6335)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 3.211e-07       \n",
       "                                          \n",
       "                  Kappa : 0.2051          \n",
       " Mcnemar's Test P-Value : 0.4745          \n",
       "                                          \n",
       "            Sensitivity : 0.6407          \n",
       "            Specificity : 0.5641          \n",
       "         Pos Pred Value : 0.6238          \n",
       "         Neg Pred Value : 0.5819          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3396          \n",
       "   Detection Prevalence : 0.5445          \n",
       "      Balanced Accuracy : 0.6024          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred <- predict(stack, newdata = valid.dv[, -c(1, hc.dv)])\n",
    "confusionMatrix(pred, valid.party)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.3.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
