{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "source(\"2-model_tests.R\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Discriminant Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Notes on Models\n",
    "\n",
    "* train.set with KNN imputing\n",
    "    - NZV makes no difference\n",
    "    - BoxCox makes no difference\n",
    "    - PCA makes no difference\n",
    "* train.dv improves over train.set but gives warning for collinearity\n",
    "* train.hc improves over train.dv but gives warning for collinearity unless nzv removed\n",
    "    - PCA slightly decreases accuracy, kappa, and specificity; slightly increases sensitivity; no warning for collinearity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: caretEnsemble\n",
      "\n",
      "Attaching package: 'caretEnsemble'\n",
      "\n",
      "The following object is masked from 'package:ggplot2':\n",
      "\n",
      "    autoplot\n",
      "\n",
      "Loading required package: MASS\n",
      "\n",
      "Attaching package: 'MASS'\n",
      "\n",
      "The following object is masked from 'package:dplyr':\n",
      "\n",
      "    select\n",
      "\n",
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "$cl\n",
       "$lda1\n",
       "Linear Discriminant Analysis \n",
       "\n",
       "4455 samples\n",
       " 106 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (106), centered (106),\n",
       " scaled (106) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6655766  0.6334592  0.5895976\n",
       "\n",
       " \n",
       "\n",
       "$lda2\n",
       "Linear Discriminant Analysis \n",
       "\n",
       "4455 samples\n",
       " 106 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: bagged tree imputation (106) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6724155  0.6477794  0.5889282\n",
       "\n",
       " \n",
       "\n",
       "$lda3\n",
       "Linear Discriminant Analysis \n",
       "\n",
       "4455 samples\n",
       " 106 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (106), centered (106),\n",
       " scaled (106) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6655766  0.6334592  0.5895976\n",
       "\n",
       " \n",
       "\n",
       "$lda4\n",
       "Linear Discriminant Analysis \n",
       "\n",
       "4455 samples\n",
       " 106 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (106), principal\n",
       " component signal extraction (106), centered (106), scaled (106) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6652153  0.6454019  0.5841517\n",
       "\n",
       " \n",
       "\n",
       "attr(,\"class\")\n",
       "[1] \"caretList\"\n",
       "\n",
       "$cm\n",
       "$cm$lda1\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        362        194\n",
       "  Republican      228        329\n",
       "                                          \n",
       "               Accuracy : 0.6208          \n",
       "                 95% CI : (0.5916, 0.6494)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 6.24e-10        \n",
       "                                          \n",
       "                  Kappa : 0.2417          \n",
       " Mcnemar's Test P-Value : 0.1082          \n",
       "                                          \n",
       "            Sensitivity : 0.6136          \n",
       "            Specificity : 0.6291          \n",
       "         Pos Pred Value : 0.6511          \n",
       "         Neg Pred Value : 0.5907          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3252          \n",
       "   Detection Prevalence : 0.4996          \n",
       "      Balanced Accuracy : 0.6213          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n",
       "$cm$lda2\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        380        202\n",
       "  Republican      210        321\n",
       "                                          \n",
       "               Accuracy : 0.6298          \n",
       "                 95% CI : (0.6007, 0.6583)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 1.156e-11       \n",
       "                                          \n",
       "                  Kappa : 0.2576          \n",
       " Mcnemar's Test P-Value : 0.7302          \n",
       "                                          \n",
       "            Sensitivity : 0.6441          \n",
       "            Specificity : 0.6138          \n",
       "         Pos Pred Value : 0.6529          \n",
       "         Neg Pred Value : 0.6045          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3414          \n",
       "   Detection Prevalence : 0.5229          \n",
       "      Balanced Accuracy : 0.6289          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n",
       "$cm$lda3\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        362        194\n",
       "  Republican      228        329\n",
       "                                          \n",
       "               Accuracy : 0.6208          \n",
       "                 95% CI : (0.5916, 0.6494)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 6.24e-10        \n",
       "                                          \n",
       "                  Kappa : 0.2417          \n",
       " Mcnemar's Test P-Value : 0.1082          \n",
       "                                          \n",
       "            Sensitivity : 0.6136          \n",
       "            Specificity : 0.6291          \n",
       "         Pos Pred Value : 0.6511          \n",
       "         Neg Pred Value : 0.5907          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3252          \n",
       "   Detection Prevalence : 0.4996          \n",
       "      Balanced Accuracy : 0.6213          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n",
       "$cm$lda4\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        378        200\n",
       "  Republican      212        323\n",
       "                                          \n",
       "               Accuracy : 0.6298          \n",
       "                 95% CI : (0.6007, 0.6583)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 1.156e-11       \n",
       "                                          \n",
       "                  Kappa : 0.2579          \n",
       " Mcnemar's Test P-Value : 0.5879          \n",
       "                                          \n",
       "            Sensitivity : 0.6407          \n",
       "            Specificity : 0.6176          \n",
       "         Pos Pred Value : 0.6540          \n",
       "         Neg Pred Value : 0.6037          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3396          \n",
       "   Detection Prevalence : 0.5193          \n",
       "      Balanced Accuracy : 0.6291          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prep <- list(\"nzv\", c(\"nzv\", \"pca\"))\n",
    "set.seed(1056)\n",
    "mods.lda <- run_models(\"lda\", train.dv2i[, -1], valid.dv2i[, -1], prep, trCtrl)\n",
    "mods.lda"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prep <- list(\"nzv\", c(\"nzv\", \"pca\"))\n",
    "set.seed(1056)\n",
    "mods.lda2 <- run_models(\"lda\", train.hc2[, -1], valid.hc2[, -1], prep, trCtrl)\n",
    "mods.lda2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prep <- list(\"nzv\", c(\"nzv\", \"pca\"))\n",
    "set.seed(1056)\n",
    "mods.lda3 <- run_models(\"lda\", train.lc[, -1], valid.lc[, -1], prep, trCtrl)\n",
    "mods.lda3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th></th><th scope=col>lda1</th><th scope=col>lda2</th><th scope=col>lda3</th><th scope=col>lda4</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>lda1</th><td>1.0000000</td><td>0.8510705</td><td>1.0000000</td><td>0.9557793</td></tr>\n",
       "\t<tr><th scope=row>lda2</th><td>0.8510705</td><td>1.0000000</td><td>0.8510705</td><td>0.8050401</td></tr>\n",
       "\t<tr><th scope=row>lda3</th><td>1.0000000</td><td>0.8510705</td><td>1.0000000</td><td>0.9557793</td></tr>\n",
       "\t<tr><th scope=row>lda4</th><td>0.9557793</td><td>0.8050401</td><td>0.9557793</td><td>1.0000000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|llll}\n",
       "  & lda1 & lda2 & lda3 & lda4\\\\\n",
       "\\hline\n",
       "\tlda1 & 1.0000000 & 0.8510705 & 1.0000000 & 0.9557793\\\\\n",
       "\tlda2 & 0.8510705 & 1.0000000 & 0.8510705 & 0.8050401\\\\\n",
       "\tlda3 & 1.0000000 & 0.8510705 & 1.0000000 & 0.9557793\\\\\n",
       "\tlda4 & 0.9557793 & 0.8050401 & 0.9557793 & 1.0000000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 0.851070455477293\n",
       "3. 1\n",
       "4. 0.955779251519638\n",
       "5. 0.851070455477293\n",
       "6. 1\n",
       "7. 0.851070455477293\n",
       "8. 0.805040093827346\n",
       "9. 1\n",
       "10. 0.851070455477293\n",
       "11. 1\n",
       "12. 0.955779251519638\n",
       "13. 0.955779251519638\n",
       "14. 0.805040093827346\n",
       "15. 0.955779251519638\n",
       "16. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "          lda1      lda2      lda3      lda4\n",
       "lda1 1.0000000 0.8510705 1.0000000 0.9557793\n",
       "lda2 0.8510705 1.0000000 0.8510705 0.8050401\n",
       "lda3 1.0000000 0.8510705 1.0000000 0.9557793\n",
       "lda4 0.9557793 0.8050401 0.9557793 1.0000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelCor(resamples(mods$cl))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: pls\n",
      "\n",
      "Attaching package: 'pls'\n",
      "\n",
      "The following object is masked from 'package:caret':\n",
      "\n",
      "    R2\n",
      "\n",
      "The following object is masked from 'package:stats':\n",
      "\n",
      "    loadings\n",
      "\n",
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "$cl\n",
       "$pls1\n",
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 224 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (219), centered (219),\n",
       " scaled (219), remove (5) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  ncomp  ROC        Sens       Spec     \n",
       "   1     0.5969551  0.6837785  0.4711506\n",
       "   2     0.6602847  0.6683720  0.5455498\n",
       "   3     0.6697753  0.6817468  0.5551998\n",
       "   4     0.6687973  0.6573536  0.5647460\n",
       "   5     0.6630701  0.6509225  0.5643796\n",
       "   6     0.6618279  0.6512544  0.5638852\n",
       "   7     0.6579101  0.6432933  0.5637024\n",
       "   8     0.6584227  0.6437142  0.5636113\n",
       "   9     0.6575286  0.6480333  0.5611210\n",
       "  10     0.6575681  0.6459172  0.5606421\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was ncomp = 3. \n",
       "\n",
       "attr(,\"class\")\n",
       "[1] \"caretList\"\n",
       "\n",
       "$cm\n",
       "$cm$pls1\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        413        214\n",
       "  Republican      177        309\n",
       "                                          \n",
       "               Accuracy : 0.6487          \n",
       "                 95% CI : (0.6198, 0.6768)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 7.727e-16       \n",
       "                                          \n",
       "                  Kappa : 0.292           \n",
       " Mcnemar's Test P-Value : 0.06867         \n",
       "                                          \n",
       "            Sensitivity : 0.7000          \n",
       "            Specificity : 0.5908          \n",
       "         Pos Pred Value : 0.6587          \n",
       "         Neg Pred Value : 0.6358          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3711          \n",
       "   Detection Prevalence : 0.5633          \n",
       "      Balanced Accuracy : 0.6454          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          \n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prep <- list(c(\"nzv\", \"bagImpute\"))\n",
    "set.seed(1056)\n",
    "mods.pls <- run_models(\"pls\", train.dv4[, -1], valid.dv4[, -1], prep, trCtrl, tuneGrid = expand.grid(.ncomp = 1:10))\n",
    "mods.pls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "$cl\n",
       "$pls1\n",
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (309), centered (309),\n",
       " scaled (309), remove (6) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4010, 4010, 4009, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  ncomp  ROC        Sens       Spec     \n",
       "   1     0.6192128  0.7143589  0.4708685\n",
       "   2     0.6714123  0.6891200  0.5486179\n",
       "   3     0.6750193  0.6865690  0.5524370\n",
       "   4     0.6703355  0.6672635  0.5602643\n",
       "   5     0.6639376  0.6573504  0.5619804\n",
       "   6     0.6603915  0.6509984  0.5616947\n",
       "   7     0.6580351  0.6415948  0.5627460\n",
       "   8     0.6574746  0.6452385  0.5595899\n",
       "   9     0.6567505  0.6428653  0.5605477\n",
       "  10     0.6562271  0.6429500  0.5610321\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was ncomp = 3. \n",
       "\n",
       "attr(,\"class\")\n",
       "[1] \"caretList\"\n",
       "\n",
       "$cm\n",
       "$cm$pls1\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        419        214\n",
       "  Republican      171        309\n",
       "                                         \n",
       "               Accuracy : 0.6541         \n",
       "                 95% CI : (0.6253, 0.682)\n",
       "    No Information Rate : 0.5301         \n",
       "    P-Value [Acc > NIR] : < 2e-16        \n",
       "                                         \n",
       "                  Kappa : 0.3024         \n",
       " Mcnemar's Test P-Value : 0.03231        \n",
       "                                         \n",
       "            Sensitivity : 0.7102         \n",
       "            Specificity : 0.5908         \n",
       "         Pos Pred Value : 0.6619         \n",
       "         Neg Pred Value : 0.6437         \n",
       "             Prevalence : 0.5301         \n",
       "         Detection Rate : 0.3765         \n",
       "   Detection Prevalence : 0.5687         \n",
       "      Balanced Accuracy : 0.6505         \n",
       "                                         \n",
       "       'Positive' Class : Democrat       \n",
       "                                         \n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prep <- list(c(\"nzv\", \"knnImpute\"))\n",
    "set.seed(1056)\n",
    "mods.pls2 <- run_models(\"pls\", train.hc2[, -1], valid.hc2[, -1], prep, trCtrl, tuneGrid = expand.grid(.ncomp = 1:10))\n",
    "mods.pls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: MASS\n",
      "\n",
      "Attaching package: 'MASS'\n",
      "\n",
      "The following object is masked from 'package:dplyr':\n",
      "\n",
      "    select\n",
      "\n",
      "Warning message:\n",
      "In lda.default(x, grouping, ...): variables are collinear"
     ]
    }
   ],
   "source": [
    "set.seed(1056)\n",
    "lda3 <- train(x = train.hc[, -1], y = train.party, method = \"lda\", trControl = trCtrl, metric = \"ROC\",\n",
    "              preProcess = c(\"nzv\", \"knnImpute\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pred.lda3 <- predict(lda3, newdata = valid.hc[, -1], na.action = na.pass)\n",
    "cm.lda3 <- confusionMatrix(pred.lda3, valid.party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Linear Discriminant Analysis \n",
       "\n",
       "4455 samples\n",
       " 122 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (118), centered (118),\n",
       " scaled (118), remove (4) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4010, 4009, 4009, 4010, 4010, ... \n",
       "Resampling results:\n",
       "\n",
       "  ROC        Sens       Spec     \n",
       "  0.6649332  0.6425113  0.5864466\n",
       "\n",
       " "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lda3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        380        193\n",
       "  Republican      210        330\n",
       "                                          \n",
       "               Accuracy : 0.6379          \n",
       "                 95% CI : (0.6089, 0.6662)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 2.309e-13       \n",
       "                                          \n",
       "                  Kappa : 0.2745          \n",
       " Mcnemar's Test P-Value : 0.4254          \n",
       "                                          \n",
       "            Sensitivity : 0.6441          \n",
       "            Specificity : 0.6310          \n",
       "         Pos Pred Value : 0.6632          \n",
       "         Neg Pred Value : 0.6111          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3414          \n",
       "   Detection Prevalence : 0.5148          \n",
       "      Balanced Accuracy : 0.6375          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm.lda3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "predTest <- predict(lda3, newdata = test.hc[, -1], na.action = na.pass)\n",
    "\n",
    "test.submit <- data_frame(USER_ID = testing$USER_ID, Predictions = predTest)\n",
    "\n",
    "mod <- str_replace_all(as.character(Sys.time()), \"-|:| \", \"\")\n",
    "write_csv(test.submit, paste0(\"submission_\", mod, \".csv\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Partial Least Squares Discriminant Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Notes on Models\n",
    "- train.dv2 improves accuracy over top LDA model\n",
    "- train.hc2 improves accuracy over train.dv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: pls\n",
      "\n",
      "Attaching package: 'pls'\n",
      "\n",
      "The following object is masked from 'package:caret':\n",
      "\n",
      "    R2\n",
      "\n",
      "The following object is masked from 'package:stats':\n",
      "\n",
      "    loadings\n",
      "\n"
     ]
    }
   ],
   "source": [
    "set.seed(1056)\n",
    "pls1 <- train(x = train.dv2[, -1], y = train.party, method = \"pls\", trControl = trCtrl, metric = \"ROC\",\n",
    "              preProcess = \"knnImpute\", tuneGrid = expand.grid(.ncomp = 1:10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pred.pls1 <- predict(pls1, newdata = valid.dv2[, -1], na.action = na.pass)\n",
    "cm.pls1 <- confusionMatrix(pred.pls1, valid.party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 329 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (329), centered (329),\n",
       " scaled (329) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4010, 4009, 4009, 4010, 4010, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  ncomp  ROC        Sens       Spec     \n",
       "   1     0.6164302  0.7082486  0.4744976\n",
       "   2     0.6707430  0.6835997  0.5556938\n",
       "   3     0.6761090  0.6852975  0.5612276\n",
       "   4     0.6721289  0.6681832  0.5678227\n",
       "   5     0.6650225  0.6583537  0.5627569\n",
       "   6     0.6609039  0.6507277  0.5663800\n",
       "   7     0.6585382  0.6431853  0.5687601\n",
       "   8     0.6582865  0.6448820  0.5655142\n",
       "   9     0.6576116  0.6438672  0.5677102\n",
       "  10     0.6572554  0.6444593  0.5682903\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was ncomp = 3. "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pls1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        408        214\n",
       "  Republican      182        309\n",
       "                                          \n",
       "               Accuracy : 0.6442          \n",
       "                 95% CI : (0.6153, 0.6724)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 8.887e-15       \n",
       "                                          \n",
       "                  Kappa : 0.2833          \n",
       " Mcnemar's Test P-Value : 0.1193          \n",
       "                                          \n",
       "            Sensitivity : 0.6915          \n",
       "            Specificity : 0.5908          \n",
       "         Pos Pred Value : 0.6559          \n",
       "         Neg Pred Value : 0.6293          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3666          \n",
       "   Detection Prevalence : 0.5588          \n",
       "      Balanced Accuracy : 0.6412          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm.pls1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "set.seed(1056)\n",
    "pls2 <- train(x = train.hc2[, -1], y = train.party, method = \"pls\", trControl = trCtrl, metric = \"ROC\",\n",
    "              preProcess = c(\"nzv\", \"knnImpute\"), tuneGrid = expand.grid(.ncomp = 1:10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pred.pls2 <- predict(pls2, newdata = valid.hc2[, -1], na.action = na.pass)\n",
    "cm.pls2 <- confusionMatrix(pred.pls2, valid.party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (309), centered (309),\n",
       " scaled (309), remove (6) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4010, 4009, 4009, 4010, 4010, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  ncomp  ROC        Sens       Spec     \n",
       "   1     0.6187365  0.7133308  0.4724926\n",
       "   2     0.6713414  0.6855517  0.5472846\n",
       "   3     0.6757346  0.6892791  0.5541572\n",
       "   4     0.6705284  0.6676772  0.5629478\n",
       "   5     0.6641744  0.6579318  0.5581695\n",
       "   6     0.6603100  0.6523407  0.5593119\n",
       "   7     0.6578861  0.6425109  0.5609282\n",
       "   8     0.6575169  0.6430222  0.5578751\n",
       "   9     0.6568918  0.6425967  0.5585455\n",
       "  10     0.6564419  0.6417514  0.5622702\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was ncomp = 3. "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        419        214\n",
       "  Republican      171        309\n",
       "                                         \n",
       "               Accuracy : 0.6541         \n",
       "                 95% CI : (0.6253, 0.682)\n",
       "    No Information Rate : 0.5301         \n",
       "    P-Value [Acc > NIR] : < 2e-16        \n",
       "                                         \n",
       "                  Kappa : 0.3024         \n",
       " Mcnemar's Test P-Value : 0.03231        \n",
       "                                         \n",
       "            Sensitivity : 0.7102         \n",
       "            Specificity : 0.5908         \n",
       "         Pos Pred Value : 0.6619         \n",
       "         Neg Pred Value : 0.6437         \n",
       "             Prevalence : 0.5301         \n",
       "         Detection Rate : 0.3765         \n",
       "   Detection Prevalence : 0.5687         \n",
       "      Balanced Accuracy : 0.6505         \n",
       "                                         \n",
       "       'Positive' Class : Democrat       \n",
       "                                         "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm.pls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "predTest <- predict(pls2, newdata = test.hc2[, -1], na.action = na.pass)\n",
    "\n",
    "test.submit <- data_frame(USER_ID = testing$USER_ID, Predictions = predTest)\n",
    "\n",
    "mod <- str_replace_all(as.character(Sys.time()), \"-|:| \", \"\")\n",
    "write_csv(test.submit, paste0(\"submission_\", mod, \".csv\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "set.seed(1056)\n",
    "pls3 <- train(x = train.lc[, -1], y = train.party, method = \"pls\", trControl = trCtrl, metric = \"ROC\",\n",
    "              preProcess = c(\"nzv\", \"knnImpute\"), tuneGrid = expand.grid(.ncomp = 1:10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pred.pls3 <- predict(pls3, newdata = valid.lc[, -1], na.action = na.pass)\n",
    "cm.pls3 <- confusionMatrix(pred.pls3, valid.party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be usedWarning message:\n",
      "In gsub(\"knnImpute\", paste(x$k, \"nearest neighbor imputation\"), : argument 'replacement' has length > 1 and only the first element will be used"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Partial Least Squares \n",
       "\n",
       "4455 samples\n",
       " 225 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: YOB nearest neighbor imputation (220), centered (220),\n",
       " scaled (220), remove (5) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4010, 4009, 4009, 4010, 4010, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  ncomp  ROC        Sens       Spec     \n",
       "   1     0.6471076  0.7334120  0.4727810\n",
       "   2     0.6759575  0.6935983  0.5545427\n",
       "   3     0.6756334  0.6817371  0.5574081\n",
       "   4     0.6694861  0.6694551  0.5642780\n",
       "   5     0.6652167  0.6584402  0.5676218\n",
       "   6     0.6626654  0.6520872  0.5659941\n",
       "   7     0.6607633  0.6520883  0.5628403\n",
       "   8     0.6585994  0.6503958  0.5591160\n",
       "   9     0.6565849  0.6444615  0.5607373\n",
       "  10     0.6556611  0.6408196  0.5618865\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final value used for the model was ncomp = 2. "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pls3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        423        224\n",
       "  Republican      167        299\n",
       "                                          \n",
       "               Accuracy : 0.6487          \n",
       "                 95% CI : (0.6198, 0.6768)\n",
       "    No Information Rate : 0.5301          \n",
       "    P-Value [Acc > NIR] : 7.727e-16       \n",
       "                                          \n",
       "                  Kappa : 0.2904          \n",
       " Mcnemar's Test P-Value : 0.004625        \n",
       "                                          \n",
       "            Sensitivity : 0.7169          \n",
       "            Specificity : 0.5717          \n",
       "         Pos Pred Value : 0.6538          \n",
       "         Neg Pred Value : 0.6416          \n",
       "             Prevalence : 0.5301          \n",
       "         Detection Rate : 0.3801          \n",
       "   Detection Prevalence : 0.5813          \n",
       "      Balanced Accuracy : 0.6443          \n",
       "                                          \n",
       "       'Positive' Class : Democrat        \n",
       "                                          "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm.pls3"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.3.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
