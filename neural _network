{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nonlinear Classification Models\n",
    "\n",
    "* Quadratic Discriminant Analysis\n",
    "* Regularized Discriminant Analysis\n",
    "* Mixture Discriminant Analysis\n",
    "* Flexible Discriminant Analysis\n",
    "* Neural Networks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "source(\"2-model_tests.R\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "models <- list(\"qda\", \"rda\", \"mda\", \"fda\", \"earth\")\n",
    "noTune <- list(tuneGrid = NULL)\n",
    "rdaGrid <- list(tuneLength = 10)\n",
    "mdaGrid <- list(tuneGrid = expand.grid(.subclasses = 1:8))\n",
    "marsGrid <- list(tuneGrid = expand.grid(.degree = 1:2, .nprune = 2:38))\n",
    "tune <- list(noTune, rdaGrid, mdaGrid, marsGrid, marsGrid)\n",
    "prep <- list(NULL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "vars <- hc2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mods1 <- run_models(train.dv2i, valid.dv2i, vars, models, tune, prep, trCtrl)\n",
    "mods1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "$cl\n",
       "$nnet\n",
       "Neural Network \n",
       "\n",
       "4455 samples\n",
       " 315 predictor\n",
       "   2 classes: 'Democrat', 'Republican' \n",
       "\n",
       "Pre-processing: centered (315), scaled (315), spatial sign transformation (315) \n",
       "Resampling: Cross-Validated (10 fold, repeated 5 times) \n",
       "Summary of sample sizes: 4010, 4009, 4010, 4009, 4010, 4009, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  size  decay  ROC        Sens       Spec     \n",
       "   1    0.0    0.4829842  0.4849467  0.6825354\n",
       "   1    0.1    0.6598129  0.6407370  0.5762160\n",
       "   1    1.0    0.6700214  0.6700447  0.5656186\n",
       "   1    2.0    0.6748393  0.6961321  0.5440337\n",
       "   2    0.0    0.4912257  0.5823961  0.5611356\n",
       "   2    0.1    0.6284609  0.6123654  0.5636254\n",
       "   2    1.0    0.6691043  0.6675041  0.5640925\n",
       "   2    2.0    0.6740300  0.6920654  0.5468011\n",
       "   3    0.0    0.5002109  0.5701176  0.5579517\n",
       "   3    0.1    0.6094800  0.6022835  0.5501650\n",
       "   3    1.0    0.6690998  0.6675889  0.5642821\n",
       "   3    2.0    0.6739846  0.6914725  0.5466115\n",
       "   4    0.0    0.4742504  0.6122381  0.5116860\n",
       "   4    0.1    0.5992639  0.5986423  0.5383828\n",
       "   4    1.0    0.6689243  0.6679278  0.5630408\n",
       "   4    2.0    0.6739053  0.6918955  0.5462306\n",
       "   5    0.0    0.4949907  0.6052381  0.5171934\n",
       "   5    0.1    0.5917499  0.5864371  0.5401308\n",
       "   5    1.0    0.6689101  0.6678435  0.5627542\n",
       "   5    2.0    0.6738859  0.6919806  0.5459444\n",
       "   6    0.0    0.5318676  0.5728066  0.5455019\n",
       "   6    0.1    0.5887764  0.5853340  0.5341112\n",
       "   6    1.0    0.6688859  0.6677583  0.5623732\n",
       "   6    2.0    0.6738628  0.6918955  0.5457535\n",
       "   7    0.0    0.5480279  0.5867818  0.5257498\n",
       "   7    0.1    0.5920320  0.5892405  0.5382183\n",
       "   7    1.0    0.6688564  0.6678431  0.5624694\n",
       "   7    2.0    0.6738568  0.6918111  0.5460396\n",
       "   8    0.0    0.5589906  0.5707792  0.5437476\n",
       "   8    0.1    0.5885887  0.5935575  0.5314313\n",
       "   8    1.0    0.6688471  0.6677591  0.5624694\n",
       "   8    2.0    0.6738362  0.6917264  0.5461358\n",
       "   9    0.0    0.5704499  0.5822066  0.5352618\n",
       "   9    0.1    0.5928842  0.5915193  0.5424101\n",
       "   9    1.0    0.6688431  0.6677591  0.5624689\n",
       "   9    2.0    0.6738459  0.6917260  0.5463267\n",
       "  10    0.0    0.5743767  0.6016027  0.5282802\n",
       "  10    0.1    0.5924112  0.5921161  0.5377316\n",
       "  10    1.0    0.6688402  0.6681821  0.5621823\n",
       "  10    2.0    0.6738155  0.6918111  0.5458496\n",
       "\n",
       "ROC was used to select the optimal model using  the largest value.\n",
       "The final values used for the model were size = 1 and decay = 2. \n",
       "\n",
       "attr(,\"class\")\n",
       "[1] \"caretList\"\n",
       "\n",
       "$cm\n",
       "$cm$nnet\n",
       "Confusion Matrix and Statistics\n",
       "\n",
       "            Reference\n",
       "Prediction   Democrat Republican\n",
       "  Democrat        415        229\n",
       "  Republican      175        294\n",
       "                                         \n",
       "               Accuracy : 0.637          \n",
       "                 95% CI : (0.608, 0.6653)\n",
       "    No Information Rate : 0.5301         \n",
       "    P-Value [Acc > NIR] : 3.621e-13      \n",
       "                                         \n",
       "                  Kappa : 0.2671         \n",
       " Mcnemar's Test P-Value : 0.008368       \n",
       "                                         \n",
       "            Sensitivity : 0.7034         \n",
       "            Specificity : 0.5621         \n",
       "         Pos Pred Value : 0.6444         \n",
       "         Neg Pred Value : 0.6269         \n",
       "             Prevalence : 0.5301         \n",
       "         Detection Rate : 0.3729         \n",
       "   Detection Prevalence : 0.5786         \n",
       "      Balanced Accuracy : 0.6328         \n",
       "                                         \n",
       "       'Positive' Class : Democrat       \n",
       "                                         \n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "models <- list(\"nnet\", \"avNNet\")\n",
    "nnetGrid <- list(tuneGrid = expand.grid(.size = 1:10, .decay = c(0, 0.1, 1, 2)))\n",
    "tune <- list(nnetGrid, nnetGrid)\n",
    "prep <- list(list(c(\"center\", \"scale\", \"spatialSign\")))\n",
    "maxSize <- max(nnetGrid$tuneGrid$.size)\n",
    "numWts <- 1 * (maxSize * (length(train.dv2i[, -c(1, vars)]) + 1) + maxSize + 1)\n",
    "mods2 <- run_models(train.dv2i, valid.dv2i, vars, models, tune, prep, trCtrl, trace = FALSE, maxit = 2000, MaxNWts = numWts)\n",
    "mods2"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.3.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
